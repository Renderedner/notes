; «other-possible-docs-for-learning-react»  (to ".other-possible-docs-for-learning-react")
; «react-syncronizing-with-effects»  (to ".react-syncronizing-with-effects")
;
; «react-start-new»  (to ".react-start-new")
; «react-existing-project»  (to ".react-existing-project")
; «react-quickstart»  (to ".react-quickstart")
; «react-reference-memo»  (to ".react-reference-memo")
; «react-reference-usememo»  (to ".react-reference-usememo")
;
; «jsinfo-fetch»  (to ".jsinfo-fetch")
; «jsinfo-promisebasics»  (to ".jsinfo-promisebasics")
;
; «babel-instalation»  (to ".babel-instalation")
; «babel-about»  (to ".babel-about")
;
; «webpack-getting-started»  (to ".webpack-getting-started")
; «webpack-concepts»  (to ".webpack-concepts")
;
; «mui-installation»  (to ".mui-installation")
; «mui-column-definition»  (to ".mui-column-definition")





; «.mui-installation»	(to "mui-installation")
; (find-html2pdf-links "mui-installation" "https://mui.com/x/react-data-grid/getting-started/#installation")
(code-pdf-page  "mui-installation" "$S/https/mui.com/x/react-data-grid/getting-started/#installation.pdf")
(code-pdf-text8 "mui-installation" "$S/https/mui.com/x/react-data-grid/getting-started/#installation.pdf")
(page-utils-mode 1)
; (find-mui-installationtext 1)



; «.mui-column-definition»	(to "mui-column-definition")
; (find-html2pdf-links "mui-column-definition" "https://mui.com/x/react-data-grid/column-definition/")
(code-pdf-page  "mui-column-definition" "$S/https/mui.com/x/react-data-grid/column-definition/.pdf")
(code-pdf-text8 "mui-column-definition" "$S/https/mui.com/x/react-data-grid/column-definition/.pdf")
(page-utils-mode 1)
; (find-mui-column-definitiontext 1 "columns are deﬁned with the columns prop which has the type GridColDef[]")
; (find-mui-column-definitiontext 1 "ﬁeld is the only required property")
; (find-mui-column-definitiontext 1 "used to match with" "GridRowModel values")

; (find-mui-column-definitiontext 2 "columns prop should keep the same reference between two renders")
; (find-mui-column-definitiontext 2 "to never change once the component is mounted")
; (find-mui-column-definitionpage 2 "You can create the array outside" "the render function or memoize it")

; (find-mui-column-definitiontext 3 "Providing content")
; (find-mui-column-definitiontext 3  "the column with ﬁeld" "name will render the value stored in row.name")
; (find-mui-column-definitiontext 3 "Value getter")
; (find-mui-column-definitiontext 3  "const columns: GridColDef[] = [")
; (find-mui-column-definitiontext 3  "  {")
; (find-mui-column-definitiontext 3  "    ﬁeld: 'taxRate',")
; (find-mui-column-definitionpage 3  "    valueGetter: (value) => {")
; (find-mui-column-definitiontext 4 "The value returned by valueGetter is used for:")
; (find-mui-column-definitiontext 4 "• Filtering")
; (find-mui-column-definitiontext 4 "• Sorting")
; (find-mui-column-definitionpage 4 "• Rendering (unless enhanced further by valueFormatter or renderCell )")
; (find-mui-column-definitiontext 5 "Read more in the handling autogenerated rows section.")
; (find-mui-column-definitionpage 5 "Row grouping uses the groupingValueGetter instead of valueGetter")

; (find-mui-column-definitiontext 6 "Value formatter")
; (find-mui-column-definitiontext 6  "the value returned by valueFormatter is only used for rendering purposes")
; (find-mui-column-definitiontext 6  "Filtering and" "sorting are based on the raw value ( row[ﬁeld] ) or the value returned by valueGetter")
; (find-mui-column-definitiontext 7  "Read more in the handling autogenerated rows" "section")

; (find-mui-column-definitionpage 7 "Rendering cells")
; (find-mui-column-definitiontext 7 "It resolves the rendered output in the" "following order")
; (find-mui-column-definitiontext 7 "The renderCell method of the column deﬁnitions is similar to valueFormatter")
; (find-mui-column-definitiontext 7 "However, it trades to" "be able to only render in a cell in exchange for allowing to return a React node")
; (find-mui-column-definitiontext 7 "const columns: GridColDef[] = [")
; (find-mui-column-definitiontext 7 "  {")
; (find-mui-column-definitiontext 7 "    ﬁeld: 'date',")
; (find-mui-column-definitiontext 7 "    headerName: 'Year',")
; (find-mui-column-definitionpage 7 "    renderCell: (params: GridRenderCellParams<any, Date>) => (")
; (find-mui-column-definitionpage 8 "if the type of the value returned by valueGetter does not" "correspond to the column's type , you should:")
; (find-mui-column-definitiontext 9 "• handle sorting by providing sortComparator to the column.")
; (find-mui-column-definitiontext 9 "• set a valueFormatter providing a representation for the value to be used when exporting" "the data.")

; (find-mui-column-definitionpage 9 "Styling cells")
; (find-mui-column-definitiontext 9 "Making accessible cells")
; (find-mui-column-definitionpage 9 "Using hooks inside a renderer")
; (find-mui-column-definitionpage 10 "Expand cell renderer")
; (find-mui-column-definitionpage 11 "Column types")
; (find-mui-column-definitionpage 12)
; (find-mui-column-definitionpage 13 "Converting types")
; (find-mui-column-definitiontext 14 "Actions")
; (find-mui-column-definitionpage 15)
; (find-mui-column-definitionpage 16 "Custom column types")
; (find-mui-column-definitionpage 16 "Autogenerated rows")
; (find-mui-column-definitionpage 17 "Selectors")
; (find-mui-column-definitionpage 17 "Visible columns")
; (find-mui-column-definitionpage 18 "Deﬁned columns")
; (find-mui-column-definitiontext 19 "API")



; (find-config "init.el" ".rstdoc-react")
; «.other-possible-docs-for-learning-react»	(to "other-possible-docs-for-learning-react")
;; (find-reactdocrfile "")
;; (find-reactdocw "learn/manipulating-the-dom-with-refs")
;; (find-reactdocw "learn/passing-data-deeply-with-context")
;; (find-reactdocw "learn/referencing-values-with-refs")
;; (find-reactdocw "learn/render-and-commit")
;; (find-reactdocw "learn/reusing-logic-with-custom-hooks")
;; (find-reactdocw "learn/separating-events-from-effects")
;; (find-reactdocw "learn/thinking-in-react")
;; (find-reactdocw "learn/updating-arrays-in-state")
;; (find-reactdocw "learn/updating-objects-in-state")
;; (find-reactdocw "learn/you-might-not-need-an-effect")


; «.react-syncronizing-with-effects»	(to "react-syncronizing-with-effects")
;; # (find-reactdocw "learn/synchronizing-with-effects")
;; # (find-reactdocr "learn/synchronizing-with-effects")
;; # (find-reactdocr "learn/synchronizing-with-effects" "*Effects* let you run some code after rendering")

;; # (find-reactdocw "learn/synchronizing-with-effects#what-are-effects-and-how-are-they-different-from-events")
;; # (find-reactdocr "learn/synchronizing-with-effects" "## What are Effects and how are they different from events?")
;; # (find-reactdocr "learn/synchronizing-with-effects" "## What are Effects and how are they different from events?" "**Rendering code**" "Like a math formula, it should only _calculate_ the result,")
;; # (find-reactdocr "learn/synchronizing-with-effects" "## What are Effects and how are they different from events?" "**Event handlers**" "nested functions inside your components that *do* things rather than just calculate them")
;; # (find-reactdocr "learn/synchronizing-with-effects" "## What are Effects and how are they different from events?" "Effects* let you specify side effects that are caused by rendering itself, rather than by a particular event.")
;; # (find-reactdocr "learn/synchronizing-with-effects" "## What are Effects and how are they different from events?" "Effects run at the end of a [commit](/learn/render-and-commit) after the screen updates.")

;; # (find-reactdocw "learn/synchronizing-with-effects#how-to-write-an-effect")
;; # (find-reactdocr "learn/synchronizing-with-effects" "## How to write an Effect")
;; # (find-reactdocr "learn/synchronizing-with-effects" "## How to write an Effect" "1. **Declare an Effect.")
;; # (find-reactdocr "learn/synchronizing-with-effects" "## How to write an Effect" "2. **Specify the Effect dependencies." "only re-run *when needed* ")
;; # (find-reactdocr "learn/synchronizing-with-effects" "## How to write an Effect" "3. **Add cleanup if needed.")

;; # (find-reactdocw "learn/synchronizing-with-effects#step-1-declare-an-effect")
;; # (find-reactdocr "learn/synchronizing-with-effects" "### Step 1: Declare an Effect")
;; # (find-reactdocr "learn/synchronizing-with-effects" "### Step 1: Declare an Effect" "import { useEffect } from 'react';\n")
;; # (find-reactdocr "learn/synchronizing-with-effects" "### Step 1: Declare an Effect" "Then, call it at the top level of your component and put some code inside your Effect:")
;; # (find-reactdocr "learn/synchronizing-with-effects" "### Step 1: Declare an Effect" "  useEffect(() => {\n")
;; # (find-reactdocr "learn/synchronizing-with-effects" "### Step 1: Declare an Effect" "    // Code here will run after *every* render\n")
;; # (find-reactdocr "learn/synchronizing-with-effects" "### Step 1: Declare an Effect" "  });\n")
;; # Aqui tem um exemplo interessante com um video player, onde o effect realmente precisa rodar depois do TODO render.

;; # (find-reactdocw "learn/synchronizing-with-effects#step-2-specify-the-effect-dependencies")
;; # (find-reactdocr "learn/synchronizing-with-effects" "### Step 2: Specify the Effect dependencies {/*step-2-specify-the-effect-dependencies*/}")

; «.react-reference-memo»	(to "react-reference-memo")
; (find-reactdocw "reference/react/memo")
; (find-reactdocr "reference/react/memo")
; (find-reactdocr "reference/react/memo" "`memo` lets you skip re-rendering a component when its props are unchanged.")

; «.react-reference-usememo»	(to "react-reference-usememo")
; (find-reactdocw "reference/react/useMemo")
; (find-reactdocr "reference/react/useMemo")
; (find-reactdocr "reference/react/useMemo" "`useMemo` is a React Hook that lets you cache the result of a calculation between re-renders.")
; (find-reactdocw "reference/react/useMemo#reference")
; (find-reactdocr "reference/react/useMemo" "## Reference {/*reference*/}")
; (find-reactdocr "reference/react/useMemo" "## Reference {/*reference*/}" "import { useMemo } from 'react';")
; (find-reactdocr "reference/react/useMemo" "## Reference {/*reference*/}" "function TodoList({ todos, tab }) {")
; (find-reactdocr "reference/react/useMemo" "## Reference {/*reference*/}" "  const visibleTodos = useMemo(")
; (find-reactdocr "reference/react/useMemo" "## Reference {/*reference*/}" "    () => filterTodos(todos, tab),")
; (find-reactdocr "reference/react/useMemo" "## Reference {/*reference*/}" "    [todos, tab]")

; (find-reactdocw "reference/react/useMemo#parameters")
; (find-reactdocr "reference/react/useMemo" "#### Parameters")
; (find-reactdocr "reference/react/useMemo" "#### Parameters" "calculateValue`: The function calculating the value that you want to cache.")
; (find-reactdocr "reference/react/useMemo" "#### Parameters"                  "It should be pure,")
; (find-reactdocr "reference/react/useMemo" "#### Parameters"                  "On next renders, React will return the same value again if the `dependencies` have not changed since the last render.")
; (find-reactdocr "reference/react/useMemo" "#### Parameters"                  "Otherwise, it will call `calculateValue`, return its result, and store it so it can be reused later.")
; (find-reactdocr "reference/react/useMemo" "#### Parameters" "dependencies`: The list of all reactive values referenced inside of the `calculateValue` code")

; «.react-quickstart»	(to "react-quickstart")
; (find-daily "22-10-2024.org" ".revising-react")
;; (find-reactdocw "learn/")
;; (find-reactdocr "learn/index")

;; (find-reactdocw "learn")
;; (find-reactdocw "learn#components")
;; (find-reactdocr "learn/index" "## Creating and nesting components")
;; (find-reactdocr "learn/index" "## Creating and nesting components" "React components are JavaScript functions that return markup")
;; (find-reactdocr "learn/index" "## Creating and nesting components" "React component names must always start with a capital letter,")
;; (find-reactdocr "learn/index" "## Creating and nesting components" "while HTML tags must be lowercase.")

;; (find-reactdocw "learn#displaying-data")
;; (find-reactdocr "learn/index" "## Displaying data")
;; (find-reactdocr "learn/index" "## Displaying data" "Curly braces let you \"escape back\" into JavaScript so that you can embed some variable from your code")
;; (find-reactdocr "learn/index" "## Displaying data" "You can use the `style` attribute when your styles depend on JavaScript variables.")

;; (find-reactdocw "learn#conditional-rendering")
;; (find-reactdocr "learn/index" "## Conditional rendering")
;; (find-reactdocr "learn/index" "## Conditional rendering" "[conditional `?` operator.]" "Unlike `if`, it works inside JSX:")
;; (find-reactdocr "learn/index" "## Conditional rendering" "When you don't need the `else` branch, you can also use a shorter [logical `&&` syntax]")

;; (find-reactdocw "learn#rendering-lists")
;; (find-reactdocr "learn/index" "## Rendering lists")
;; (find-reactdocr "learn/index" "## Rendering lists" "rely on JavaScript features like [`for` loop]" "and the [array `map()` function]")
;; (find-reactdocr "learn/index" "## Rendering lists" "use the `map()` function to transform an array of products into an array of `<li>` items")
;; (find-reactdocr "learn/index" "## Rendering lists" "`<li>` has a `key` attribute. For each item in a list, you should pass a string or a number that uniquely identifies that item among its siblings.")
;; (find-reactdocr "learn/index" "## Rendering lists" "React uses your keys to know what happened if you later insert, delete, or reorder the items.")

;; (find-reactdocw "learn#responding-to-events")
;; (find-reactdocr "learn/index" "## Responding to events")
;; (find-reactdocr "learn/index" "## Responding to events" "respond to events by declaring *event handler* functions inside your components")
;; (find-reactdocr "learn/index" "## Responding to events" "Do not _call_ the event handler function: you only need to *pass it down*")

;; (find-reactdocw "learn#updating-the-screen")
;; (find-reactdocr "learn/index" "## Updating the screen")
;; (find-reactdocr "learn/index" "## Updating the screen" "add *state* to your component.")
;; (find-reactdocr "learn/index" "## Updating the screen" "import { useState } from 'react';")
;; (find-reactdocr "learn/index" "## Updating the screen"     "const [count, setCount] = useState(0);")
;; (find-reactdocr "learn/index" "## Updating the screen" "If you render the same component multiple times, each will get its own state.")

;; (find-reactdocw "learn#using-hooks")
;; (find-reactdocr "learn/index" "## Using Hooks")
;; (find-reactdocr "learn/index" "## Using Hooks" "Functions starting with `use` are called *Hooks*.")
;; (find-reactdocr "learn/index" "## Using Hooks" "You can also write your own Hooks by combining the existing ones.")
;; (find-reactdocr "learn/index" "## Using Hooks" "You can only call Hooks *at the top* of your components (or other Hooks).")
;; ?  (find-reactdocr "learn/index" "## Using Hooks" "If you want to use `useState` in a condition or a loop, extract a new component and put it there.")

;; (find-reactdocw "learn#sharing-data-between-components")
;; (find-reactdocr "learn/index" "## Sharing data between components")
;; (find-reactdocr "learn/index" "## Sharing data between components" "you need to move the state from the individual buttons \"upwards\" to the closest component containing all of them")
;; (find-reactdocr "learn/index" "## Sharing data between components" "Then, *pass the state down* from `MyApp` to each `MyButton`, together with the shared click handler.")
;; (find-reactdocr "learn/index" "## Sharing data between components" "The information you pass down like this is called _props_.")




; «.react-start-new»	(to "react-start-new")
; (find-html2pdf-links "react-start-new" "https://react.dev/learn/start-a-new-react-project")
(code-pdf-page  "react-start-new" "$S/https/react.dev/learn/start-a-new-react-project.pdf")
(code-pdf-text8 "react-start-new" "$S/https/react.dev/learn/start-a-new-react-project.pdf")
(page-utils-mode 1)
; (find-react-start-newpage 1)
; (find-react-start-newpage 2)
; (find-react-start-newpage 3)


; «.react-existing-project»	(to "react-existing-project")
; (find-html2pdf-links "react-existing-project" "https://react.dev/learn/add-react-to-an-existing-project")
(code-pdf-page  "react-existing-project" "$S/https/react.dev/learn/add-react-to-an-existing-project.pdf")
(code-pdf-text8 "react-existing-project" "$S/https/react.dev/learn/add-react-to-an-existing-project.pdf")
(page-utils-mode 1)
; (find-react-existing-projecttext 3 "Using React for a part of your existing page")
; (find-react-existing-projecttext 4 "Set up a JavaScript environment that lets you use the JSX syntax,")
; (find-react-existing-projecttext 4 "Render your React components where you want to see them on the" "page.")

; (find-react-existing-projecttext 5 "you might need" "to transform your JavaScript code with Babel, and enable the Babe" "React preset to use JSX.")
; (find-react-existing-projecttext 5 "If your app doesn’t have an existing setup for compiling JavaScript" "modules, set it up with Vite.")
; (find-react-existing-projecttext 5 "npm install react react-dom")

; (find-react-existing-projecttext 5 "npm install react react-dom")
; (find-react-existing-projecttext 5 "Then add these lines of code at the top of your main JavaScript file")
; (find-react-existing-projecttext 5 "(it" "might be called index.js or main.js )")
; (find-react-existing-projecttext 5  "import { createRoot } from 'react-dom/client';")
; (find-react-existing-projecttext 5  "document.body.innerHTML = '<div id=\"app\"></div>';")
; (find-react-existing-projecttext 5  "const root = createRoot(document.getElementById('app'));")
; (find-react-existing-projecttext 5  "root.render(<h1>Hello, world</h1>);")

; (find-react-existing-projecttext 7 "Step 2: Render React components anywhere on the" "page")
; (find-react-existing-projecttext 7 "Open your HTML page (or the server templates that" "generate it) and add a unique id attribute to any tag")
; (find-react-existing-projecttext 8 "This lets you find that HTML element with document.getElementById and")
; (find-react-existing-projecttext 8  "pass it to createRoot so that you can render your own React component" "inside")

; (find-react-existing-projectpage 9  "Read the createRoot usage" "documentation to learn more about rendering React components inside an" "existing HTML page.")


; «.babel-instalation»	(to "babel-instalation")
; (find-html2pdf-links "babel-instalation" "https://babeljs.io/setup#installation")
(code-pdf-page  "babel-instalation" "$S/https/babeljs.io/setup#installation.pdf")
(code-pdf-text8 "babel-instalation" "$S/https/babeljs.io/setup#installation.pdf")
(page-utils-mode 1)
; (find-babel-instalationpage 1)
; (find-babel-instalationtext 2 "Installation")
; (find-babel-instalationtext 2  "We can install Babel CLI locally by running:")
; (find-babel-instalationtext 2  "npm install --save-dev @babel/core @babel/cli")
; (find-babel-instalationtext 3 "Usage")
; (find-babel-instalationtext 3  "Simply add a \"scripts\" field to your package.json and put the babel command inside there as build .")
; (find-babel-instalationtext 3  "npm run build")
; (find-babel-instalationpage 4 "Create babel.config.json configuration file")
; (find-babel-instalationtext 4  "Create a babel.config.json config in your project root and enable some presets.")
; (find-babel-instalationtext 4  "npm install @babel/preset-env --save-dev")
; (find-babel-instalationtext 4  "In order to enable the preset you have to define it in your babel.config.json file, like this:")
; (find-babel-instalationpage 5)

; «.babel-about»	(to "babel-about")
; (find-html2pdf-links "babel-about" "https://babeljs.io/docs/")
(code-pdf-page  "babel-about" "$S/https/babeljs.io/docs/.pdf")
(code-pdf-text8 "babel-about" "$S/https/babeljs.io/docs/.pdf")
(page-utils-mode 1)
; (find-babel-abouttext 1)
; (find-babel-abouttext 1 "Babel is a JavaScript compiler")
; (find-babel-abouttext 1 "convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers\nor environments.")
; (find-babel-aboutpage 2)
; (find-babel-aboutpage 3)
; (find-babel-abouttext 4 "JSX and React")
; (find-babel-abouttext 4  "npm install --save-dev @babel/preset-react")
; (find-babel-abouttext 4  "and add @babel/preset-react to your Babel configuration.")




; «.webpack-getting-started»	(to "webpack-getting-started")
; (find-html2pdf-links "webpack-getting-started" "https://webpack.js.org/guides/getting-started")
(code-pdf-page  "webpack-getting-started" "$S/https/webpack.js.org/guides/getting-started.pdf")
(code-pdf-text8 "webpack-getting-started" "$S/https/webpack.js.org/guides/getting-started.pdf")
(page-utils-mode 1)
; (find-webpack-getting-startedtext 1 "Basic Setup")
; (find-webpack-getting-startedtext 1 "npm install webpack webpack-cli --save-dev")
; (find-webpack-getting-startedtext 1 "src/index.js")
; (find-webpack-getting-startedtext 1  "// Lodash, currently included via a script, is required for this line to work")
; (find-webpack-getting-startedtext 2 "index.html")
; (find-webpack-getting-startedtext 2  "<script src=\"https://unpkg.com/lodash@4.17.20\"></script>\n")
; (find-webpack-getting-startedtext 2 "prevent an\naccidental publish of your code.")
; (find-webpack-getting-startedtext 2  "package.json")
; (find-webpack-getting-startedtext 2 "implicit dependencies between the <script> tags")

; (find-webpack-getting-startedtext 3 "Let's use webpack to manage these scripts instead.")
; (find-webpack-getting-startedtext 3 "Creating a Bundle")
; (find-webpack-getting-startedtext 3  "separating the \"source\" code (./src) from our \"distribution\" code (./dist)")
; (find-webpack-getting-startedtext 3  "install the library locally:\nnpm install --save lodash")
; (find-webpack-getting-startedtext 3  "+import _ from 'lodash';")
; (find-webpack-getting-startedtext 3 "remove the lodash <script>, as we now import it, and modify the other\n<script> tag to load the bundle, instead of the raw ./src file")




; «.webpack-concepts»	(to "webpack-concepts")
; (find-html2pdf-links "webpack-concepts" "https://webpack.js.org/concepts/")
(code-pdf-page  "webpack-concepts" "$S/https/webpack.js.org/concepts/.pdf")
(code-pdf-text8 "webpack-concepts" "$S/https/webpack.js.org/concepts/.pdf")
(page-utils-mode 1)
; (find-webpack-conceptstext 1 "webpack is a static module bundler")
; (find-webpack-conceptstext 1 "builds a dependency graph from one or more entry points")
; (find-webpack-conceptstext 1 "combines every module your project needs into one or more bundles")
; (find-webpack-conceptstext 1 "which are static assets to" "serve your content from")

; (find-webpack-conceptspage 2 "Manually Bundling an Application")
; (find-webpack-conceptspage 2 "Entry")
; (find-webpack-conceptstext 2 "An entry point indicates which module webpack should use to begin building out its internal" "dependency graph.")
; (find-webpack-conceptstext 2 "By default its value is")
;;                                                      ./src/index.js 
; (find-webpack-conceptspage 2 "but you can specify a di�erent (or multiple) entry points")

; (find-webpack-conceptstext 3 "Output")
; (find-webpack-conceptstext 3 "tells webpack where to emit the bundles it creates and how to name")
; (find-webpack-conceptspage 3 "It" "defaults to                   for the main output file and to the          folder for any other")
;                                                ./dist/main.js                                        ./dist/

; (find-webpack-conceptstext 3 "It" "defaults to                   for the main output file and to the          folder for any other")
; (find-webpack-conceptstext 3 "You can configure this part of the process")

; (find-webpack-conceptspage 4 "Loaders")
; (find-webpack-conceptstext 4 "Loaders allow webpack to process\nother types of files and convert them into valid modules")
; (find-webpack-conceptspage 4 "At a high level, loaders have two properties in your webpack configuration:")
; (find-webpack-conceptspage 5)

; (find-webpack-conceptstext 5 "Plugins")
; (find-webpack-conceptstext 5 "plugins can be leveraged to perform a\nwider range of tasks like")
; (find-webpack-conceptstext 5 "bundle optimization, asset management and injection of environment" "fvariables")
; (find-webpack-conceptspage 6)
; (find-webpack-conceptspage 7)

; (find-webpack-conceptspage 7 "Mode")
; (find-webpack-conceptstext 7 "By setting the       parameter")
; (find-webpack-conceptstext 7 "you can enable\nwebpack's built-in optimizations that correspond to each environment.")
; (find-webpack-conceptstext 7 "The default value is"           )
;                                                    production
; (find-webpack-conceptspage 7 "Learn more about the mode configuration here")

; (find-webpack-conceptstext 7 "Browser Compatibility")

; (find-webpack-conceptspage 7 "Environment")






; <webpack-assetmanagement>
; (find-html2pdf-links "webpack-assetmanagement" "https://webpack.js.org/guides/asset-management/")
(code-pdf-page  "webpack-assetmanagement" "$S/https/webpack.js.org/guides/asset-management/.pdf")
(code-pdf-text8 "webpack-assetmanagement" "$S/https/webpack.js.org/guides/asset-management/.pdf")
(page-utils-mode 1)
; (find-webpack-assetmanagementpage 1)

; (find-webpack-assetmanagementpage 2 "Loading CSS")
; (find-webpack-assetmanagementpage 2 "install and add the style-loader and css-loader to your module configuration")
; (find-webpack-assetmanagementtext 2 "npm install --save-dev style-loader css-loader")
; (find-webpack-assetmanagementtext 2 "webpack.config.js")
; (find-webpack-assetmanagementtext 2 "+ module: {")
; (find-webpack-assetmanagementtext 2 "+       rules: [")
; (find-webpack-assetmanagementtext 2 "+          {")
; (find-webpack-assetmanagementtext 2 "+             test: /\\.css$/i,")
; (find-webpack-assetmanagementtext 2 "+             use: ['style-loader', 'css-loader'],")
; (find-webpack-assetmanagementtext 2 "+          },")
; (find-webpack-assetmanagementpage 2 "+       ],")
; (find-webpack-assetmanagementpage 3)
; (find-webpack-assetmanagementpage 4)








; «.jsinfo-fetch»	(to "jsinfo-fetch")
; (find-html2pdf-links "jsinfo-fetch" "https://javascript.info/fetch")
(code-pdf-page  "jsinfo-fetch" "$S/https/javascript.info/fetch.pdf")
(code-pdf-text8 "jsinfo-fetch" "$S/https/javascript.info/fetch.pdf")
(page-utils-mode 1)
; (find-jsinfo-fetchpage 1)
; (find-jsinfo-fetchtext 1 "we can use a network request to:")
; (find-jsinfo-fetchtext 1 "And all of that without reloading the page!")
; (find-jsinfo-fetchtext 1 "There’s an umbrella term “AJAX” (abbreviated Asynchronous JavaScript And XML) for network requests from JavaScript.")
; (find-jsinfo-fetchtext 1 "We don’t have to use XML\nthough: the term comes from old times")

; (find-jsinfo-fetchtext 1 "let promise = fetch(url, [options])")
; (find-jsinfo-fetchtext 1 "Without options, this is a simple GET request, downloading the contents of the url.")

; (find-jsinfo-fetchpage 1 "First, the promise, returned by fetch, resolves with an object of the built-in Response class as soon as the server responds with headers.")
; (find-jsinfo-fetchpage 2)



; «.jsinfo-promisebasics»	(to "jsinfo-promisebasics")
; https://javascript.info/promise-error-handling
; (find-html2pdf-links "jsinfo-promisebasics" "https://javascript.info/promise-basics")
(code-pdf-page  "jsinfo-promisebasics" "$S/https/javascript.info/promise-basics.pdf")
(code-pdf-text8 "jsinfo-promisebasics" "$S/https/javascript.info/promise-basics.pdf")
(page-utils-mode 1)
; (find-jsinfo-promisebasicstext 1 "1. A “producing code” that does something and takes time.")
; (find-jsinfo-promisebasicstext 1 "2. A “consuming code” that wants the result of the “producing code” once it’s ready.")
; (find-jsinfo-promisebasicstext 1 "3. A promise is a special JavaScript object that links the “producing code” and the “consuming code” together.")

; (find-jsinfo-promisebasicstext 1 "let promise = new Promise(function(resolve, reject) {")
; (find-jsinfo-promisebasicstext 1 "The function passed to new Promise is called the executor.")
; (find-jsinfo-promisebasicstext 1 "When new Promise is created, the executor runs automatically.")
; (find-jsinfo-promisebasicstext 1 "Its arguments resolve and reject are callbacks provided by JavaScript itself.")
; (find-jsinfo-promisebasicstext 1 "When the executor obtains the result, be it soon or late, doesn’t matter, it should call one of these callbacks")
; (find-jsinfo-promisebasicstext 1  "• resolve(value) — if the job is finished successfully, with result value.")
; (find-jsinfo-promisebasicstext 1  "• reject(error) — if an error has occurred, error is the error object.")

; (find-jsinfo-promisebasicstext 2 "So to summarize: the executor runs automatically and attempts to perform a job.")
; (find-jsinfo-promisebasicstext 2 "When it is finished with the attempt, it calls resolve if it was successful or\nreject if there was an error.")

; (find-jsinfo-promisebasicstext 2 "internal properties:")
; (find-jsinfo-promisebasicstext 2 "• state — initially \"pending\", then changes to either \"fulﬁlled\" when resolve is called or \"rejected\"")
; (find-jsinfo-promisebasicstext 2 "• result — initially undeﬁned, then changes to value when resolve(value) is called or error when reject(error) is called.")

; (find-jsinfo-promisebasicstext 2 "1. The executor is called automatically and immediately (by new Promise).")
; (find-jsinfo-promisebasicstext 2 "2. The executor receives two arguments: resolve and reject. These functions are pre-defined by the JavaScript engine,")

; (find-jsinfo-promisebasicstext 3 "A promise that is either resolved or rejected is called “settled”, as opposed to an initially “pending” promise.")
; (find-jsinfo-promisebasicstext 3 "There can be only a single result or an error")
; (find-jsinfo-promisebasicstext 3 "Any state change is final.")
; (find-jsinfo-promisebasicspage 3 "Also, resolve/reject expect only one argument (or none) and will ignore additional arguments.")

; (find-jsinfo-promisebasicstext 3 "Reject with Error objects")
; (find-jsinfo-promisebasicspage 3 "Immediately calling resolve/reject")

; (find-jsinfo-promisebasicstext 4 "The properties state and result of the Promise object are internal. We can’t directly access them.")
; (find-jsinfo-promisebasicstext 4 "We can use the methods .then/.catch/.ﬁnally for that.")

; (find-jsinfo-promisebasicstext 4 "Consuming functions can be registered (subscribed) using the methods .then and .catch.")

; (find-jsinfo-promisebasicstext 4 "promise.then(")
; (find-jsinfo-promisebasicstext 4 "   function(result) { /* handle a successful result */ },")
; (find-jsinfo-promisebasicstext 4 "   function(error) { /* handle an error */ }")
; (find-jsinfo-promisebasicstext 4 ");")
; (find-jsinfo-promisebasicstext 4 "The first argument of .then is a function that runs when the promise is resolved and receives the result.")
; (find-jsinfo-promisebasicstext 4 "The second argument of .then is a function that runs when the promise is rejected and receives the error.")

; (find-jsinfo-promisebasicstext 5 "If we’re interested only in successful completions, then we can provide only one function argument to .then:")
; (find-jsinfo-promisebasicstext 5 "If we’re interested only in errors, then we can use null as the first argument: .then(null, errorHandlingFunction).")
; (find-jsinfo-promisebasicstext 5 "// .catch(f) is the same as promise.then(null, f)")

; (find-jsinfo-promisebasicstext 5 "The call .ﬁnally(f) is similar to .then(f, f) in the sense that f runs always, when the promise is settled: be it resolve or reject.")
; (find-jsinfo-promisebasicstext 6 "new Promise((resolve, reject) => {")
; (find-jsinfo-promisebasicstext 6 "   /* do something that takes time, and then call resolve or maybe reject */")
; (find-jsinfo-promisebasicstext 6 "}")
; (find-jsinfo-promisebasicstext 6 "   // runs when the promise is settled, doesn't matter successfully or not\n")
; (find-jsinfo-promisebasicstext 6 "   .ﬁnally(() => stop loading indicator)\n")
; (find-jsinfo-promisebasicstext 6 "   // so the loading indicator is always stopped before we go on")
; (find-jsinfo-promisebasicstext 6 "   .then(result => show result, err => show error)")
; (find-jsinfo-promisebasicstext 6 "Please note that ﬁnally(f) isn’t exactly an alias of then(f,f) though.")
; (find-jsinfo-promisebasicstext 6  "1. A ﬁnally handler has no arguments.")
; (find-jsinfo-promisebasicstext 6  "2. A ﬁnally handler “passes through” the result or error to the next suitable handler.")
; (find-jsinfo-promisebasicstext 7  "3. A ﬁnally handler also shouldn’t return anything. If it does, the returned value is silently ignored.")
; (find-jsinfo-promisebasicstext 7      "exception to this rule is when a ﬁnally handler throws an error. Then this error goes to the next handler, instead of any previous outcome")

; (find-jsinfo-promisebasicstext 7 "it might be that a promise is already settled when we add a handler to it.\n\nIn such case, these handlers just run immediately")

; (find-jsinfo-promisebasicstext 7 "Example: loadScript")

