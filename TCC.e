# ¬´mikeleving-repldriven¬ª  (to ".mikeleving-repldriven")
# ¬´clean-code-vs-liberdade¬ª  (to ".clean-code-vs-liberdade")
# ¬´parallel-branches-example¬ª  (to ".parallel-branches-example")






# ¬´.parallel-branches-example¬ª	(to "parallel-branches-example")
(find-telegachatm "272098718#66676")
Fazendo um exemplo de c√≥digo em duas branches paralelas..

 (eepitch-vterm)
rm   -rf /tmp/meta-package/
mkdir -p /tmp/meta-package/
cd /tmp/meta-package/
curl https://raw.githubusercontent.com/Renderedner/elisp/refs/heads/main/meta-package/main.el            > main.el
curl https://raw.githubusercontent.com/Renderedner/elisp/refs/heads/main/meta-package/parallel-commit.el > parallel-commit.el

# (find-configfile "meta-package/main.el"            "defvar _mc-original-branch")
# (find-configfile "meta-package/parallel-commit.el" "defun _mc-get-git-root-dir")
 (add-to-list 'load-path "~/tmp/meta-package/")
 (load "parallel-commit.el")
 (defun _mc-get-git-root-dir () "/tmp/meta-teste/")
 (setq _mc-original-branch "master")
 (setq _mc-sync-log-file-name "meta/.meta_sync_log")

 (eepitch-vterm)
rm -rf   /tmp/meta-teste/
mkdir -p /tmp/meta-teste/
cd       /tmp/meta-teste/
# python -m venv .venv
# source .venv/bin/activate
# pip install flask
# (find-notes "flask.e" ".flask-quickstart" "Save it as hello.py")
echo "\
from flask import Flask

app = Flask(__name__)

@app.route(\"/\")
def hello_world():
    return \"<p>Hello, World\!</p>\"
" > app.py
echo -e "meta/" > .gitignore
git init
git add app.py
git add .gitignore
git commit -m "Primeiro commit com c√≥digo original"
 (setq ___temp_hash_primeiro_commit (_mc-get-last-commit-hash))
git branch


git branch meta
git checkout meta
git branch
cat app.py
echo "\
from flask import Flask

app = Flask(__name__)

# ( Isso √© um elemento adicional \\/
# (find-notes \"flask.e\" \".flask-quickstart\" \"Save it as hello.py\")
@app.route(\"/\")
def hello_world():
    return \"\"\"<p>Hello, World\!</p>
              <p>Isso n√£o √© um elemento adicional</p>\"\"\"
" > app.py
git diff app.py
git add app.py
echo "" > .gitignore 
git add .gitignore
git commit -m "Segundo commit no branch meta, com conte√∫do adicional"

# (find-configfile "meta-package/parallel-commit.el" "defvar _mc-sync-log-file-name")
# (find-configfile "meta-package/parallel-commit.el" "defun _mc-get-last-sync-meta-hash")
# (find-configfile "meta-package/parallel-commit.el" "original: <hash> | meta: <hash_to_be_returned> | type: <parallel-commit|merge>\\")
git log # hash do primeiro commit
mkdir -p meta
 (eepitch-line (format "echo \"original: %s | meta: %s | type: parallel-commit\" > meta/.meta_sync_log" ___temp_hash_primeiro_commit ___temp_hash_primeiro_commit))
git add meta/.meta_sync_log
git commit -m "adicionando arquivo com hist√≥rico de sincroniza√ß√£o"

# (find-configfile "meta-package/parallel-commit.el" "defun mc-parallel-commit-1")
# (_mc-get-list-of-branches)
# (_mc-get-git-root-dir)
 (mc-parallel-commit-1)
cat meta/.meta_sync_log
git status
cat app.py

git add app.py
rm .meta_sync_log
git restore .gitignore
git status
git commit -m "Terceiro commit sincronizando os branches"

echo '\
from flask import Flask

app = Flask(__name__)

@app.route("/")
def hello_world():
    return """<p>Hello, World!</p>
              <p>Isso n√£o √© um elemento adicional</p>
              <p>Mais uma adi√ß√£o, feita do orignal Branch</p>"""
' > app.py
cat app.py
git add app.py
git commit -m "Quarto commit des-sincronizando as branches"

git checkout meta
git merge master 
cat app.py
echo '
from flask import Flask

app = Flask(__name__)

# ( Isso √© um elemento adicional \/
# (find-notes "flask.e" ".flask-quickstart" "Save it as hello.py")
@app.route("/")
def hello_world():
    return """<p>Hello, World!</p>
              <p>Isso n√£o √© um elemento adicional</p>
              <p>Mais uma adi√ß√£o, feita do orignal Branch</p>"""
' > app.py
git status
git add app.py
git status
git commit -m "Quinto commit sincronizando as duas branches"

git checkout master; cat app.py
git checkout meta;   cat app.py














# ¬´.clean-code-vs-liberdade¬ª	(to "clean-code-vs-liberdade")
(find-telegachatm "272098718#66674")

# https://www.hostgator.com.br/blog/clean-code-o-que-e/
Sobre oque √© aceit√°vel, e oque n√£o √© aceit√°vel na comunidade de desenvolvimento.

Existem boas pr√°ticas que s√£o de conhecimento bem difundido na comunidade de desenvolvedores na internet.
Principalmente quando essa √°rea teve um crescimento enorme, onde haviam muitas vagas para esse tipo de emprego,
e todos estava afim de entrar pra √°rea. Isso movimentou muita conte√∫do, e nutriu bastante esses padr√µes que
ficaram bem estabelecidos, e caso voc√™ tenha a expectativa de colaborar em algum projeto grande, famoso, √©
preciso aderir a eles.

Mas acontece tamb√©m que isso criou uma imagem meio engessada de como se pode desenvolver software, e a√≠, qualquer
coisa que foge desse padr√£o bem estabelecida, est√° errado, mesmo antes de se considerar qual valor aquilo pode
ter.

Existe a no√ß√£o de Clean Code, onde algumas regras s√£o postas para serem seguidas. As regras fazem sentido,
mas elas impossibilitam determinadas coisas que tamb√©m fazem sentido em outro contexto. Por exemplo as seguintes
3 coisas: 'Comente apenas o necess√°rio', 'Tratamento de Erros', 'Testes unit√°rios'. 

Manter apenas os coment√°rios mais necess√°rios, e manter o minimo de coment√°rios poss√≠veis, faz sentido pensando
que ao longo do desenvolvimento pessoas v√£o fu√ßar no c√≥digo, mas n√£o v√£o adaptar o coment√°rio. Mas existem
contextos onde os coment√°rios s√£o extremamente relevantes, e n√£o faz sentido modificar o c√≥digo sem modificar o
coment√°rio. Sendo que nos coment√°rios podem ser inclu√≠dos v√°rios elementos interessantes, como testes e links.

Tratamento de erro tamb√©m √© super importante no contexto de uma programa em produ√ß√£o, mas existem programas, que
mesmo depois de prontos, conv√©m que n√£o tenham alguns tratamentos de erros, sendo esperado do usu√°rio que entenda
que o programa parou, e convidando-o a investigar o porque e a entender o funcionamento interno do programa. S√£o
programas que n√£o s√£o populares, que demandam um maior n√≠vel de envolvimento por parte do usu√°rio, mais doque
simplesmente baixar, e clicar em bot√µes intuitivos, esses programas demandam algum tipo de inicia√ß√£o.

Testes unit√°rios envolvem o desenvolvimento de testes que balizam o desenvolvimento do software em s√≠. Ent√£o
costumam ser escritos antes do pr√≥prio c√≥digo, como uma especifica√ß√£o doque o c√≥digo deve fazer, e enquanto o
programa est√° sendo desenvolvido, sabe-se que se ele n√£o passar nos testes, n√£o est√° correto. O paradigma Clean
diz que estes testes precisam ser r√°pidos, independentes entre s√≠, repet√≠veis, n√£o-ambiguos, devem ser escritos
a tempo.

Existem outros tipos de testes que podem ser implementados, e que fogem √† esses crit√©rios. Os testes que tenho em
mente s√£o desenvolvidos paralelamente ao pr√≥prio c√≥digo, e podem ser contidos justamente nos coment√°rios do
c√≥digo sendo desenvolvido, como um elementeo adicional. N√£o faz sentido que sejam escritos antes do c√≥digo principal,
pois s√£o desenvolvidos de uma forma REPL-based, ent√£o o desenvolvimento do c√≥digo depende do teste, e o do teste
depende do c√≥digo.

Aqui est√° um exemplo de como um teste desses pode ser. Onde uma endpoint em um servidor √© difinido como uma fun√ß√£o
em python, e um bloco de coment√°rios multi-linha acima da fun√ß√£o, cont√©m instru√ß√µes para rodar o servidor localmente
e 3 hyperlinks para testar esse endpoint:
``` Python
"""
 (eepitch-vterm)
conda activate arcgis2
flask run
(find-firefox "http://127.0.0.1:5000/get_laudo_social")
(find-firefox "http://127.0.0.1:5000/get_laudo_social?FID=12")
(find-firefox "http://127.0.0.1:5000/get_laudo_social?FID=5000")
"""
from doc_builder import build_doc
@app.route('/get_laudo_social/')
def download_file():
    FID = request.args.get('FID', None)
    if not FID:
        return "N√£o teve FID irm√£o"

    file_path = build_doc(FID)
    if not file_path:
        return "<h1>N√£o gerou o PDF, entre em contato com o Bruno</h1>"
    return send_file(file_path, as_attachment=True)
```

Isso √© para exemplificar que h√° um cultura doque pode ou n√£o pode entrar no c√≥digo fonte de um programa, que imp√µe
√† criatividade, e ao que pode ser feito para o processo de desenvolvimento ser algo que condiz mais com o funcionamento
peculiar de cada um.

Obs:. 
Me lembro dos princ√≠pios SOLID. Mas vendo aqui, imediatamente n√£o me surge essa quest√£o com isso.






;; (find-daily "02-04-2025.org" ".ochs")
;; (find-daily "01-04-2025.org" ".ochs")

# ¬´.mikeleving-repldriven¬ª	(to "mikeleving-repldriven")
;; (find-html2pdf-links "mikeleving-repldriven" "https://mikelevins.github.io/posts/2020-12-18-repl-driven/")
(code-pdf-page  "mikeleving-repldriven" "$S/https/mikelevins.github.io/posts/2020-12-18-repl-driven/.pdf")
(code-pdf-text8 "mikeleving-repldriven" "$S/https/mikelevins.github.io/posts/2020-12-18-repl-driven/.pdf")
(page-utils-mode 1)
; (find-mikeleving-repldriventext 1 "What are these repl-driven programming systems")
; (find-mikeleving-repldriventext 2 "canonical repl-driven development environments: Common Lisp and Smalltalk")
; (find-mikeleving-repldrivenpage 2 "a language and runtime system that are designed from the ground up" "changing it while it runs" )
; (find-mikeleving-repldriventext 2 "there are no artificial\nlimitations on what the repl can do")
; (find-mikeleving-repldriventext 2 "support changing your program while it runs")
; (find-mikeleving-repldriventext 3 "A breakloop is a full-featured repl" "but it exists inside the dynamic\nenvironment of the broken function")
; (find-mikeleving-repldriventext 3 "there‚Äôs a style of programming, well known in Lisp and Smalltalk circles, in which you define a toplevel\nfunction with calls to other functions that don‚Äôt yet exist")
; (find-mikeleving-repldriventext 3 "Does your language runtime notice that the definition of the type has changed?" "does it automatically reinitialize it to\nconform to the new definition")
; (find-mikeleving-repldriventext 3 "You don‚Äôt want to have to kill your program and\nrebuild it from scratch just because you changed a definition.")
; (find-mikeleving-repldrivenpage 4)

REPL-driven programming √© um tipo de programa√ß√£o onde a ideia √© construir iterativamente um programa, em vez de sentar e planejar como ele ser√° arquitetado, o
programador entra na tarefa de programar sem supor quais ser√£o os desafios, t√©cinas e algoritmos que ser√£o usados, se deparando com eles no momento que for
necess√°rio apenas. Mas daria pra fazer isso em um ambiente sem um REPL, s√≥ que seria menos natural.

No REPL-drive programming a ideia √© modificar o programa enquanto ele j√° est√° rodando. De forma que o feedback de uma altera√ß√£o feita √© quase instant√¢neo.
Voc√™ n√£o precisa se lembrar oque determinada vari√°vel carrega, ou quais fun√ß√µes fazem oque. Voc√™ pode experimentar enquanto est√° programando, pois o programa
j√° est√° rodando, ent√£o os experimentos tem um resultado instantaneo.

Algumas linguagens foram criadas com esse tipo de desenvolvimento em mente. E possuem neat features que auxiliam e tornam tudo isso mais fluido. Dois exemplos
s√£o 'Common Lisp' e 'Small Talk'. Duas coisas coisas que o ambiente REPL-drive dessas linguagens suporta, s√£o:

breakloops: onde o programa roda at√© encontrar uma excess√£o, um erro, e ao se deparar com o erro, o o programa abre uma nova REPL, dessa vez com o ambiente
sendo a stack que estava 'vigente' no momento que o erro aconteceu. Dessa forma o programador pode fazer refer√™ncia √† fun√ß√µes que n√£o existem, rodar o c√≥digo,
e quando o interpretador se deparar com essas fun√ß√µes inexistentes, o programador define elas de forma interativa, e d√° continuidade ao programa como se nada
tivesse acontecido.

reinstancia√ß√£o de objetos de um tipo, quando o a defini√ß√£o do tipo muda:
Quando a defini√ß√£o de algum tipo muda no ambiente, e j√° existem objetos instanciados daquele tipo, o interessante √© que os objetos sejam reinstanciados para
estarem de acordo com a nova defini√ß√£o. Quando o design de uma linguagem n√£o foi feito levando em considera√ß√£o um objetivo como esse, √© mais dif√≠cil que uma
REPL possua esse tipo de funcionalidade.

Eu utilizo muito o python, e desenvolvo usando na maior parte esse paradigma orientado a REPLs. Mas o design dessa linguagem n√£o foi feito com isso em mente.
Enquanto o brakloop √© f√°cil de implementar utilizando o debugger padr√£o do python. A reinstancia√ß√£o de objetos √© mais complicada. H√° uma biblioteca chamada
'reload' padr√£o da linguagem que permite recarregar m√≥dulos, fazendo com que altera√ß√µes feitas no c√≥digo reflitam no programa sem que haja a necessidade
de encerralo e inicialo novamente. Mas nada al√©m disso, que eu saiba.

Uma investiga√ß√£o e implementa√ß√£o no sentido de trazer essa funcionalidade pode ser interessante.
